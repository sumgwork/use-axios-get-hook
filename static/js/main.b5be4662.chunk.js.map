{"version":3,"sources":["../../src/index.js","App.js","serviceWorker.js","index.js"],"names":["options","abortCondition","dependencyParams","processor","outputData","useState","response","setResponse","error","setError","isLoading","setIsLoading","useEffect","a","axios","res","json","Error","Object","fetchData","App","useAxiosGet","loading","message","JSON","stringify","undefined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"y3DAGA,I,EAAoB,SAAC,GAQhB,IANHA,EAMG,uDANO,CACRC,gBADQ,EAERC,iBAFQ,GAGRC,UAAW,sBACXC,gBAJQ,GAMP,EAC6BC,mBAD7B,eACIC,EADJ,KACcC,EADd,OAEuBF,mBAFvB,eAEIG,EAFJ,KAEWC,EAFX,OAG+BJ,oBAH/B,YAGIK,EAHJ,KAGeC,EAHf,KAKKT,EAA4DF,EALjE,iBAKuBC,EAA0CD,EALjE,eAKuCG,EAA0BH,EALjE,UAKkDI,EAAeJ,EALjE,WAmCH,OA7BAY,qBAAU,WACR,KACEL,UACK,MAAqB,EACX,6BAAG,8BAAAM,EAAA,6DAChBF,MADgB,kBAGIG,QAHJ,aAGRC,EAHQ,OAIRC,EAAOD,EAJC,WAMVA,SANU,qBAORC,EAPQ,8BAQJ,IAAIC,MAAMC,cAAcF,EARpB,uBAUJ,IAAIC,MAVA,uCAcZV,EADF,EACcJ,EAAZI,GACKA,GAfO,kDAiBdE,EAAS,EAATA,IAjBc,yBAmBdE,MAnBc,6EAAH,qDAsBfQ,MA1BK,aA4BejB,GA5BxBU,MA6BO,CAACN,EAAUE,EAAlB,ICzBaY,EAlBH,WAAO,IAAD,EACmBC,EACjC,8CAFc,mBACTf,EADS,KACCE,EADD,KACQc,EADR,KAKhB,OACE,6BACGA,GAAW,4CACVA,GAAWd,GAAS,6BAAMA,EAAMe,UAChCD,IAAYd,GAASF,GACrB,6BACE,8CACA,6BAAMkB,KAAKC,UAAUnB,OAAUoB,EAAW,OCHhCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMe,c","file":"static/js/main.b5be4662.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst useAxiosGet = (\n  url,\n  options = {\n    abortCondition: false,\n    dependencyParams: [],\n    processor: (value) => value,\n    outputData: undefined, //used for caching the response\n  }\n) => {\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { dependencyParams, abortCondition, processor, outputData } = options;\n  useEffect(() => {\n    if (!!outputData) {\n      setResponse(outputData);\n    } else if (!abortCondition) {\n      const fetchData = async () => {\n        setIsLoading(true);\n        try {\n          const res = await axios.get(url);\n          const json = res.data;\n\n          if (res.status !== 200) {\n            if (json.errors) {\n              throw new Error(Object.values(json.errors));\n            } else {\n              throw new Error(\"Error occured with API call\");\n            }\n          }\n          if (processor) {\n            setResponse(processor(json));\n          } else setResponse(json);\n        } catch (error) {\n          setError(error);\n        } finally {\n          setIsLoading(false);\n        }\n      };\n      fetchData();\n    }\n  }, [abortCondition, ...(dependencyParams || [])]);\n  return [response, error, isLoading];\n};\n\nexport default useAxiosGet;\n","import React from \"react\";\nimport useAxiosGet from \"use-axios-get-hook\";\n\nconst App = () => {\n  const [response, error, loading] = useAxiosGet(\n    \"https://jsonplaceholder.typicode.com/todos\"\n  );\n\n  return (\n    <div>\n      {loading && <div>Loading...</div>}\n      {!loading && error && <div>{error.message}</div>}\n      {!loading && !error && response && (\n        <div>\n          <h2>Fetch Complete</h2>\n          <pre>{JSON.stringify(response, undefined, 2)}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}