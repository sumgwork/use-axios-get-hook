{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["options","abortCondition","dependencyParams","processor","outputData","useState","response","setResponse","error","setError","isLoading","setIsLoading","useEffect","a","axios","res","json","Error","Object","fetchData","App","useAxiosGet","loading","message","JSON","stringify","undefined","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"41DAGA,I,EAAoB,SAAC,GAQhB,IANHA,EAMG,uDANO,CACRC,gBADQ,EAERC,iBAFQ,GAGRC,UAAW,sBACXC,gBAJQ,GAMP,EAC6BC,mBAD7B,eACIC,EADJ,KACcC,EADd,OAEuBF,mBAFvB,eAEIG,EAFJ,KAEWC,EAFX,OAG+BJ,oBAH/B,YAGIK,EAHJ,KAGeC,EAHf,KAKKT,EAA4DF,EALjE,iBAKuBC,EAA0CD,EALjE,eAKuCG,EAA0BH,EALjE,UAKkDI,EAAeJ,EALjE,WAmCH,OA7BAY,qBAAU,WACR,KACEL,UACK,MAAqB,EACX,6BAAG,8BAAAM,EAAA,6DAChBF,MADgB,kBAGIG,QAHJ,aAGRC,EAHQ,OAIRC,EAAOD,EAJC,WAMVA,SANU,qBAORC,EAPQ,8BAQJ,IAAIC,MAAMC,cAAcF,EARpB,uBAUJ,IAAIC,MAVA,uCAcZV,EADF,EACcJ,EAAZI,GACKA,GAfO,kDAiBdE,EAAS,EAATA,IAjBc,yBAmBdE,MAnBc,6EAAH,qDAsBfQ,MA1BK,aA4BejB,GA5BxBU,MA6BO,CAACN,EAAUE,EAAlB,ICzBaY,EAlBH,WAAO,IAAD,EACmBC,EACjC,8CAFc,mBACTf,EADS,KACCE,EADD,KACQc,EADR,KAKhB,OACE,6BACGA,GAAW,4CACVA,GAAWd,GAAS,6BAAMA,EAAMe,UAChCD,IAAYd,GAASF,GACrB,6BACE,8CACA,6BAAMkB,KAAKC,UAAUnB,OAAUoB,EAAW,OCXpDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.bb810640.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst useAxiosGet = (\n  url,\n  options = {\n    abortCondition: false,\n    dependencyParams: [],\n    processor: (value) => value,\n    outputData: undefined, //used for caching the response\n  }\n) => {\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { dependencyParams, abortCondition, processor, outputData } = options;\n  useEffect(() => {\n    if (!!outputData) {\n      setResponse(outputData);\n    } else if (!abortCondition) {\n      const fetchData = async () => {\n        setIsLoading(true);\n        try {\n          const res = await axios.get(url);\n          const json = res.data;\n\n          if (res.status !== 200) {\n            if (json.errors) {\n              throw new Error(Object.values(json.errors));\n            } else {\n              throw new Error(\"Error occured with API call\");\n            }\n          }\n          if (processor) {\n            setResponse(processor(json));\n          } else setResponse(json);\n        } catch (error) {\n          setError(error);\n        } finally {\n          setIsLoading(false);\n        }\n      };\n      fetchData();\n    }\n  }, [abortCondition, ...(dependencyParams || [])]);\n  return [response, error, isLoading];\n};\n\nexport default useAxiosGet;\n","import React from \"react\";\nimport useAxiosGet from \"use-axios-get-hook\";\n\nconst App = () => {\n  const [response, error, loading] = useAxiosGet(\n    \"https://jsonplaceholder.typicode.com/todos\"\n  );\n\n  return (\n    <div>\n      {loading && <div>Loading...</div>}\n      {!loading && error && <div>{error.message}</div>}\n      {!loading && !error && response && (\n        <div>\n          <h2>Fetch Complete</h2>\n          <pre>{JSON.stringify(response, undefined, 2)}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}